name: Helm - Build and Deploy to GKE

on:
  workflow_dispatch:
    inputs:
      tags:
        description: 'Helm manual run'
        required: false

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe
  GKE_CLUSTER: mcs-use1-npr-gke-auto
  GKE_ZONE: us-east1
  DEPLOYMENT_NAME: endocode-app
  REPOSITORY: go-docker
  IMAGE: endocode
  TAG: latest
  DEPLOY_ENVIRONMENT: dev

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Analyse, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    strategy:
      fail-fast: true
      matrix:
        language: [ 'go' ]

    permissions:
      actions: read
      contents: read
      id-token: write
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_ENDOCODE }}'
          token_format: 'access_token'

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$TAG" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$TAG"

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./

      #creating kube config from the GitHub secret. Got the config by "kubectl config view --flatten > ~/Desktop/k.txt"
      - name: Create kube config
        run: |
          mkdir -p ./kube/
          echo "${{ secrets.KUBE_CONFIG }}" > ./kube/config
          chmod 600 ./kube/config

      # Deploy with Helm
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.2

      # Last check
      - name: Lint helm charts
        run: helm lint ./chart/

      - name: Deploy to GKE
        uses: jmagnusson/deploy-helm-gke-action@v1
        with:
          docker-image-repo: $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE
          docker-image-tag: $TAG
          helm-release-name: $IMAGE
          helm-chart-path: ./chart
          helm-vars-folder: ./chart
          gke-project: ${{ secrets.GKE_PROJECT }}
          gke-cluster: $GKE_CLUSTER
          gke-zone: $GKE_ZONE
          gke-sa-key: ${{ secrets.GCP_ENDOCODE }}

      - name: Get status of what has been deployed
        run: |
          kubectl -n dev rollout status deployment/$DEPLOYMENT_NAME
          kubectl -n dev get services -o wide